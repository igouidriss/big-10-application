/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import Table8Service from './table-8.service';
import { DATE_FORMAT } from '@/shared/composables/date-format';
import { Table8 } from '@/shared/model/table-8.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('Table8 Service', () => {
    let service: Table8Service;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new Table8Service();
      currentDate = new Date();
      elemDefault = new Table8(
        123,
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        currentDate,
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        currentDate,
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            dateDebutResv18: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv19: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv20: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv21: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv22: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate57: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv58: dayjs(currentDate).format(DATE_FORMAT),
            datePremier59: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier61: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo63: dayjs(currentDate).format(DATE_FORMAT),
            techCreateDate106: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate107: dayjs(currentDate).format(DATE_FORMAT),
            dateDebutResv125: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv126: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv127: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv128: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv129: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate164: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv165: dayjs(currentDate).format(DATE_FORMAT),
            datePremier166: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier168: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo170: dayjs(currentDate).format(DATE_FORMAT),
            techCreateDate213: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate214: dayjs(currentDate).format(DATE_FORMAT),
            dateDebutResv232: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv233: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv234: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv235: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv236: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate271: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv272: dayjs(currentDate).format(DATE_FORMAT),
            datePremier273: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier275: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo277: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find(123).then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a Table8', async () => {
        const returnedFromService = Object.assign(
          {
            id: 123,
            dateDebutResv18: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv19: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv20: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv21: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv22: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate57: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv58: dayjs(currentDate).format(DATE_FORMAT),
            datePremier59: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier61: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo63: dayjs(currentDate).format(DATE_FORMAT),
            techCreateDate106: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate107: dayjs(currentDate).format(DATE_FORMAT),
            dateDebutResv125: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv126: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv127: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv128: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv129: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate164: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv165: dayjs(currentDate).format(DATE_FORMAT),
            datePremier166: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier168: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo170: dayjs(currentDate).format(DATE_FORMAT),
            techCreateDate213: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate214: dayjs(currentDate).format(DATE_FORMAT),
            dateDebutResv232: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv233: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv234: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv235: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv236: dayjs(currentDate).format(DATE_FORMAT),
            crsInsertDate271: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv272: dayjs(currentDate).format(DATE_FORMAT),
            datePremier273: dayjs(currentDate).format(DATE_FORMAT),
            dateDernier275: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo277: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            dateDebutResv18: currentDate,
            dateFinResv19: currentDate,
            truncDateDebutResv20: currentDate,
            truncDateFinResv21: currentDate,
            dateAnnResv22: currentDate,
            crsInsertDate57: currentDate,
            dateCreaResv58: currentDate,
            datePremier59: currentDate,
            dateDernier61: currentDate,
            dateDernierPseudo63: currentDate,
            techCreateDate106: currentDate,
            techUpdateDate107: currentDate,
            dateDebutResv125: currentDate,
            dateFinResv126: currentDate,
            truncDateDebutResv127: currentDate,
            truncDateFinResv128: currentDate,
            dateAnnResv129: currentDate,
            crsInsertDate164: currentDate,
            dateCreaResv165: currentDate,
            datePremier166: currentDate,
            dateDernier168: currentDate,
            dateDernierPseudo170: currentDate,
            techCreateDate213: currentDate,
            techUpdateDate214: currentDate,
            dateDebutResv232: currentDate,
            dateFinResv233: currentDate,
            truncDateDebutResv234: currentDate,
            truncDateFinResv235: currentDate,
            dateAnnResv236: currentDate,
            crsInsertDate271: currentDate,
            dateCreaResv272: currentDate,
            datePremier273: currentDate,
            dateDernier275: currentDate,
            dateDernierPseudo277: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a Table8', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a Table8', async () => {
        const returnedFromService = Object.assign(
          {
            numLigne1: 1,
            resort2: 'BBBBBB',
            resvNameId3: 1,
            clientOId4: 'BBBBBB',
            typeChb5: 'BBBBBB',
            confirmationNo6: 'BBBBBB',
            clientMdmId7: 'BBBBBB',
            nameId8: 1,
            parentResvNameId9: 1,
            contactId10: 1,
            agenceId11: 1,
            agenceNom12: 'BBBBBB',
            societeId13: 1,
            groupeId14: 1,
            numBloc15: 1,
            typeResv16: 'BBBBBB',
            statutResv17: 'BBBBBB',
            dateDebutResv18: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv19: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv20: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv21: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv22: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn23: 'BBBBBB',
            createurResv24: 1,
            nomCreateurResv25: 'BBBBBB',
            codeGarantie26: 'BBBBBB',
            flgDed27: 'BBBBBB',
            codePays28: 'BBBBBB',
            libPays29: 'BBBBBB',
            codeNationalite30: 'BBBBBB',
            libNationalite31: 'BBBBBB',
            codeSource32: 'BBBBBB',
            libSource33: 'BBBBBB',
            codeGrandSource34: 'BBBBBB',
            codeOrigine35: 'BBBBBB',
            libOrigine36: 'BBBBBB',
            codeMarche37: 'BBBBBB',
            libMarche38: 'BBBBBB',
            codeGrandMarche39: 'BBBBBB',
            libGrandMarche40: 'BBBBBB',
            codePrix41: 'BBBBBB',
            categPrix42: 'BBBBBB',
            libPrix43: 'BBBBBB',
            numChb44: 'BBBBBB',
            descriptionTypeChb45: 'BBBBBB',
            codeTypeChb46: 'BBBBBB',
            classChb47: 'BBBBBB',
            caractChb48: 'BBBBBB',
            typeChbDeReservation49: 'BBBBBB',
            descriptionTypeChbDeResv50: 'BBBBBB',
            codeTypeChbDeResv51: 'BBBBBB',
            statutDeReservation52: 'BBBBBB',
            circuitDistribution53: 'BBBBBB',
            circuitDistribUserRegroup54: 'BBBBBB',
            numCrs55: 'BBBBBB',
            typeRefCrs56: 'BBBBBB',
            crsInsertDate57: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv58: dayjs(currentDate).format(DATE_FORMAT),
            datePremier59: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier60: 'BBBBBB',
            dateDernier61: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier62: 'BBBBBB',
            dateDernierPseudo63: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo64: 'BBBBBB',
            diffDtCreaAnn65: 1,
            diffDtArrAnn66: 1,
            leadtime67: 1,
            los68: 1,
            occupantsGroupe69: 'BBBBBB',
            nbNuitee70: 1,
            nbNuiteeNnDed71: 1,
            nbResvAnn72: 1,
            nbAdu73: 1,
            nbEnf74: 1,
            nbPersDayU75: 1,
            nbPersArr76: 1,
            nbPersDep77: 1,
            nbPersAnn78: 1,
            nbPersNoshow79: 1,
            nbChbDayU80: 1,
            nbChbArr81: 1,
            nbChbDep82: 1,
            nbChbAnn83: 1,
            nbChbNoshow84: 1,
            revenuNetChambre85: 1,
            revenuTaxeChambre86: 1,
            revenuNetChambreGlobal87: 1,
            revenuTaxeChambreGlobal88: 1,
            revenuNetBq89: 1,
            revenuTaxeBq90: 1,
            revenuNetBqGlobal91: 1,
            revenuTaxeBqGlobal92: 1,
            revenuNetExtra93: 1,
            revenuTaxeExtra94: 1,
            revenuNetExtraGlobal95: 1,
            revenuTaxeExtraGlobal96: 1,
            revenuNetTotal97: 1,
            revenuTaxeTotal98: 1,
            revenuNetTotalGlobal99: 1,
            revenuTaxeTotalGlobal100: 1,
            prodRevenuChambre101: 1,
            prodRevenuBq102: 1,
            prodRevenuExtra103: 1,
            prodRevenuTotal104: 1,
            prodChambreNbNuitees105: 1,
            techCreateDate106: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate107: dayjs(currentDate).format(DATE_FORMAT),
            numLigne108: 1,
            resort109: 'BBBBBB',
            resvNameId110: 1,
            clientOId111: 'BBBBBB',
            typeChb112: 'BBBBBB',
            confirmationNo113: 'BBBBBB',
            clientMdmId114: 'BBBBBB',
            nameId115: 1,
            parentResvNameId116: 1,
            contactId117: 1,
            agenceId118: 1,
            agenceNom119: 'BBBBBB',
            societeId120: 1,
            groupeId121: 1,
            numBloc122: 1,
            typeResv123: 'BBBBBB',
            statutResv124: 'BBBBBB',
            dateDebutResv125: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv126: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv127: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv128: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv129: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn130: 'BBBBBB',
            createurResv131: 1,
            nomCreateurResv132: 'BBBBBB',
            codeGarantie133: 'BBBBBB',
            flgDed134: 'BBBBBB',
            codePays135: 'BBBBBB',
            libPays136: 'BBBBBB',
            codeNationalite137: 'BBBBBB',
            libNationalite138: 'BBBBBB',
            codeSource139: 'BBBBBB',
            libSource140: 'BBBBBB',
            codeGrandSource141: 'BBBBBB',
            codeOrigine142: 'BBBBBB',
            libOrigine143: 'BBBBBB',
            codeMarche144: 'BBBBBB',
            libMarche145: 'BBBBBB',
            codeGrandMarche146: 'BBBBBB',
            libGrandMarche147: 'BBBBBB',
            codePrix148: 'BBBBBB',
            categPrix149: 'BBBBBB',
            libPrix150: 'BBBBBB',
            numChb151: 'BBBBBB',
            descriptionTypeChb152: 'BBBBBB',
            codeTypeChb153: 'BBBBBB',
            classChb154: 'BBBBBB',
            caractChb155: 'BBBBBB',
            typeChbDeReservation156: 'BBBBBB',
            descriptionTypeChbDeResv157: 'BBBBBB',
            codeTypeChbDeResv158: 'BBBBBB',
            statutDeReservation159: 'BBBBBB',
            circuitDistribution160: 'BBBBBB',
            circuitDistribUserRegroup161: 'BBBBBB',
            numCrs162: 'BBBBBB',
            typeRefCrs163: 'BBBBBB',
            crsInsertDate164: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv165: dayjs(currentDate).format(DATE_FORMAT),
            datePremier166: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier167: 'BBBBBB',
            dateDernier168: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier169: 'BBBBBB',
            dateDernierPseudo170: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo171: 'BBBBBB',
            diffDtCreaAnn172: 1,
            diffDtArrAnn173: 1,
            leadtime174: 1,
            los175: 1,
            occupantsGroupe176: 'BBBBBB',
            nbNuitee177: 1,
            nbNuiteeNnDed178: 1,
            nbResvAnn179: 1,
            nbAdu180: 1,
            nbEnf181: 1,
            nbPersDayU182: 1,
            nbPersArr183: 1,
            nbPersDep184: 1,
            nbPersAnn185: 1,
            nbPersNoshow186: 1,
            nbChbDayU187: 1,
            nbChbArr188: 1,
            nbChbDep189: 1,
            nbChbAnn190: 1,
            nbChbNoshow191: 1,
            revenuNetChambre192: 1,
            revenuTaxeChambre193: 1,
            revenuNetChambreGlobal194: 1,
            revenuTaxeChambreGlobal195: 1,
            revenuNetBq196: 1,
            revenuTaxeBq197: 1,
            revenuNetBqGlobal198: 1,
            revenuTaxeBqGlobal199: 1,
            revenuNetExtra200: 1,
            revenuTaxeExtra201: 1,
            revenuNetExtraGlobal202: 1,
            revenuTaxeExtraGlobal203: 1,
            revenuNetTotal204: 1,
            revenuTaxeTotal205: 1,
            revenuNetTotalGlobal206: 1,
            revenuTaxeTotalGlobal207: 1,
            prodRevenuChambre208: 1,
            prodRevenuBq209: 1,
            prodRevenuExtra210: 1,
            prodRevenuTotal211: 1,
            prodChambreNbNuitees212: 1,
            techCreateDate213: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate214: dayjs(currentDate).format(DATE_FORMAT),
            numLigne215: 1,
            resort216: 'BBBBBB',
            resvNameId217: 1,
            clientOId218: 'BBBBBB',
            typeChb219: 'BBBBBB',
            confirmationNo220: 'BBBBBB',
            clientMdmId221: 'BBBBBB',
            nameId222: 1,
            parentResvNameId223: 1,
            contactId224: 1,
            agenceId225: 1,
            agenceNom226: 'BBBBBB',
            societeId227: 1,
            groupeId228: 1,
            numBloc229: 1,
            typeResv230: 'BBBBBB',
            statutResv231: 'BBBBBB',
            dateDebutResv232: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv233: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv234: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv235: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv236: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn237: 'BBBBBB',
            createurResv238: 1,
            nomCreateurResv239: 'BBBBBB',
            codeGarantie240: 'BBBBBB',
            flgDed241: 'BBBBBB',
            codePays242: 'BBBBBB',
            libPays243: 'BBBBBB',
            codeNationalite244: 'BBBBBB',
            libNationalite245: 'BBBBBB',
            codeSource246: 'BBBBBB',
            libSource247: 'BBBBBB',
            codeGrandSource248: 'BBBBBB',
            codeOrigine249: 'BBBBBB',
            libOrigine250: 'BBBBBB',
            codeMarche251: 'BBBBBB',
            libMarche252: 'BBBBBB',
            codeGrandMarche253: 'BBBBBB',
            libGrandMarche254: 'BBBBBB',
            codePrix255: 'BBBBBB',
            categPrix256: 'BBBBBB',
            libPrix257: 'BBBBBB',
            numChb258: 'BBBBBB',
            descriptionTypeChb259: 'BBBBBB',
            codeTypeChb260: 'BBBBBB',
            classChb261: 'BBBBBB',
            caractChb262: 'BBBBBB',
            typeChbDeReservation263: 'BBBBBB',
            descriptionTypeChbDeResv264: 'BBBBBB',
            codeTypeChbDeResv265: 'BBBBBB',
            statutDeReservation266: 'BBBBBB',
            circuitDistribution267: 'BBBBBB',
            circuitDistribUserRegroup268: 'BBBBBB',
            numCrs269: 'BBBBBB',
            typeRefCrs270: 'BBBBBB',
            crsInsertDate271: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv272: dayjs(currentDate).format(DATE_FORMAT),
            datePremier273: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier274: 'BBBBBB',
            dateDernier275: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier276: 'BBBBBB',
            dateDernierPseudo277: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo278: 'BBBBBB',
            diffDtCreaAnn279: 1,
            diffDtArrAnn280: 1,
            leadtime281: 1,
            los282: 1,
            occupantsGroupe283: 'BBBBBB',
            nbNuitee284: 1,
            nbNuiteeNnDed285: 1,
            nbResvAnn286: 1,
            nbAdu287: 1,
            nbEnf288: 1,
            nbPersDayU289: 1,
            nbPersArr290: 1,
            nbPersDep291: 1,
            nbPersAnn292: 1,
            nbPersNoshow293: 1,
            nbChbDayU294: 1,
            nbChbArr295: 1,
            nbChbDep296: 1,
            nbChbAnn297: 1,
            nbChbNoshow298: 1,
            revenuNetChambre299: 1,
            revenuTaxeChambre300: 1,
            revenuNetChambreGlobal301: 1,
            revenuTaxeChambreGlobal302: 1,
            revenuNetBq303: 1,
            revenuTaxeBq304: 1,
            revenuNetBqGlobal305: 1,
            revenuTaxeBqGlobal306: 1,
            revenuNetExtra307: 1,
            revenuTaxeExtra308: 1,
            revenuNetExtraGlobal309: 1,
            revenuTaxeExtraGlobal310: 1,
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            dateDebutResv18: currentDate,
            dateFinResv19: currentDate,
            truncDateDebutResv20: currentDate,
            truncDateFinResv21: currentDate,
            dateAnnResv22: currentDate,
            crsInsertDate57: currentDate,
            dateCreaResv58: currentDate,
            datePremier59: currentDate,
            dateDernier61: currentDate,
            dateDernierPseudo63: currentDate,
            techCreateDate106: currentDate,
            techUpdateDate107: currentDate,
            dateDebutResv125: currentDate,
            dateFinResv126: currentDate,
            truncDateDebutResv127: currentDate,
            truncDateFinResv128: currentDate,
            dateAnnResv129: currentDate,
            crsInsertDate164: currentDate,
            dateCreaResv165: currentDate,
            datePremier166: currentDate,
            dateDernier168: currentDate,
            dateDernierPseudo170: currentDate,
            techCreateDate213: currentDate,
            techUpdateDate214: currentDate,
            dateDebutResv232: currentDate,
            dateFinResv233: currentDate,
            truncDateDebutResv234: currentDate,
            truncDateFinResv235: currentDate,
            dateAnnResv236: currentDate,
            crsInsertDate271: currentDate,
            dateCreaResv272: currentDate,
            datePremier273: currentDate,
            dateDernier275: currentDate,
            dateDernierPseudo277: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a Table8', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a Table8', async () => {
        const patchObject = Object.assign(
          {
            resort2: 'BBBBBB',
            resvNameId3: 1,
            confirmationNo6: 'BBBBBB',
            clientMdmId7: 'BBBBBB',
            nameId8: 1,
            agenceNom12: 'BBBBBB',
            numBloc15: 1,
            typeResv16: 'BBBBBB',
            statutResv17: 'BBBBBB',
            dateDebutResv18: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv19: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv20: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv21: dayjs(currentDate).format(DATE_FORMAT),
            nomCreateurResv25: 'BBBBBB',
            libPays29: 'BBBBBB',
            libSource33: 'BBBBBB',
            codeMarche37: 'BBBBBB',
            codeGrandMarche39: 'BBBBBB',
            libGrandMarche40: 'BBBBBB',
            categPrix42: 'BBBBBB',
            descriptionTypeChb45: 'BBBBBB',
            codeTypeChb46: 'BBBBBB',
            classChb47: 'BBBBBB',
            typeChbDeReservation49: 'BBBBBB',
            circuitDistribution53: 'BBBBBB',
            circuitDistribUserRegroup54: 'BBBBBB',
            numCrs55: 'BBBBBB',
            typeRefCrs56: 'BBBBBB',
            crsInsertDate57: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier60: 'BBBBBB',
            dateDernierPseudo63: dayjs(currentDate).format(DATE_FORMAT),
            nbNuiteeNnDed71: 1,
            nbAdu73: 1,
            nbChbDayU80: 1,
            nbChbArr81: 1,
            nbChbNoshow84: 1,
            revenuTaxeChambre86: 1,
            revenuTaxeChambreGlobal88: 1,
            revenuNetBq89: 1,
            revenuTaxeBq90: 1,
            revenuNetExtra93: 1,
            revenuTaxeExtraGlobal96: 1,
            revenuNetTotal97: 1,
            revenuTaxeTotal98: 1,
            revenuTaxeTotalGlobal100: 1,
            prodRevenuChambre101: 1,
            prodRevenuBq102: 1,
            prodRevenuExtra103: 1,
            prodChambreNbNuitees105: 1,
            techUpdateDate107: dayjs(currentDate).format(DATE_FORMAT),
            numLigne108: 1,
            resvNameId110: 1,
            clientOId111: 'BBBBBB',
            typeChb112: 'BBBBBB',
            nameId115: 1,
            parentResvNameId116: 1,
            societeId120: 1,
            groupeId121: 1,
            numBloc122: 1,
            statutResv124: 'BBBBBB',
            truncDateDebutResv127: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn130: 'BBBBBB',
            createurResv131: 1,
            codeGarantie133: 'BBBBBB',
            libPays136: 'BBBBBB',
            codeOrigine142: 'BBBBBB',
            libOrigine143: 'BBBBBB',
            codeMarche144: 'BBBBBB',
            libMarche145: 'BBBBBB',
            codeGrandMarche146: 'BBBBBB',
            codePrix148: 'BBBBBB',
            libPrix150: 'BBBBBB',
            descriptionTypeChb152: 'BBBBBB',
            codeTypeChb153: 'BBBBBB',
            caractChb155: 'BBBBBB',
            descriptionTypeChbDeResv157: 'BBBBBB',
            circuitDistribUserRegroup161: 'BBBBBB',
            typeRefCrs163: 'BBBBBB',
            datePremier166: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier167: 'BBBBBB',
            dateDernier168: dayjs(currentDate).format(DATE_FORMAT),
            dateDernierPseudo170: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo171: 'BBBBBB',
            leadtime174: 1,
            los175: 1,
            nbNuiteeNnDed178: 1,
            nbResvAnn179: 1,
            nbAdu180: 1,
            nbEnf181: 1,
            nbPersArr183: 1,
            nbPersDep184: 1,
            nbPersNoshow186: 1,
            nbChbArr188: 1,
            nbChbDep189: 1,
            revenuNetChambre192: 1,
            revenuTaxeChambreGlobal195: 1,
            revenuNetBq196: 1,
            revenuTaxeBqGlobal199: 1,
            revenuNetExtra200: 1,
            revenuTaxeExtra201: 1,
            revenuTaxeExtraGlobal203: 1,
            revenuNetTotal204: 1,
            revenuNetTotalGlobal206: 1,
            revenuTaxeTotalGlobal207: 1,
            prodRevenuChambre208: 1,
            techCreateDate213: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate214: dayjs(currentDate).format(DATE_FORMAT),
            resort216: 'BBBBBB',
            resvNameId217: 1,
            typeChb219: 'BBBBBB',
            nameId222: 1,
            societeId227: 1,
            groupeId228: 1,
            statutResv231: 'BBBBBB',
            dateAnnResv236: dayjs(currentDate).format(DATE_FORMAT),
            nomCreateurResv239: 'BBBBBB',
            codePays242: 'BBBBBB',
            codeNationalite244: 'BBBBBB',
            libNationalite245: 'BBBBBB',
            codeGrandSource248: 'BBBBBB',
            libOrigine250: 'BBBBBB',
            codeGrandMarche253: 'BBBBBB',
            libPrix257: 'BBBBBB',
            typeChbDeReservation263: 'BBBBBB',
            codeTypeChbDeResv265: 'BBBBBB',
            statutDeReservation266: 'BBBBBB',
            circuitDistribUserRegroup268: 'BBBBBB',
            numCrs269: 'BBBBBB',
            datePremier273: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier274: 'BBBBBB',
            dateDernier275: dayjs(currentDate).format(DATE_FORMAT),
            diffDtArrAnn280: 1,
            leadtime281: 1,
            los282: 1,
            nbResvAnn286: 1,
            nbPersDayU289: 1,
            nbPersAnn292: 1,
            nbPersNoshow293: 1,
            nbChbDayU294: 1,
            nbChbArr295: 1,
            nbChbDep296: 1,
            revenuTaxeChambre300: 1,
            revenuNetChambreGlobal301: 1,
            revenuTaxeChambreGlobal302: 1,
            revenuTaxeBq304: 1,
            revenuNetBqGlobal305: 1,
            revenuTaxeExtra308: 1,
            revenuNetExtraGlobal309: 1,
          },
          new Table8(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            dateDebutResv18: currentDate,
            dateFinResv19: currentDate,
            truncDateDebutResv20: currentDate,
            truncDateFinResv21: currentDate,
            dateAnnResv22: currentDate,
            crsInsertDate57: currentDate,
            dateCreaResv58: currentDate,
            datePremier59: currentDate,
            dateDernier61: currentDate,
            dateDernierPseudo63: currentDate,
            techCreateDate106: currentDate,
            techUpdateDate107: currentDate,
            dateDebutResv125: currentDate,
            dateFinResv126: currentDate,
            truncDateDebutResv127: currentDate,
            truncDateFinResv128: currentDate,
            dateAnnResv129: currentDate,
            crsInsertDate164: currentDate,
            dateCreaResv165: currentDate,
            datePremier166: currentDate,
            dateDernier168: currentDate,
            dateDernierPseudo170: currentDate,
            techCreateDate213: currentDate,
            techUpdateDate214: currentDate,
            dateDebutResv232: currentDate,
            dateFinResv233: currentDate,
            truncDateDebutResv234: currentDate,
            truncDateFinResv235: currentDate,
            dateAnnResv236: currentDate,
            crsInsertDate271: currentDate,
            dateCreaResv272: currentDate,
            datePremier273: currentDate,
            dateDernier275: currentDate,
            dateDernierPseudo277: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a Table8', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of Table8', async () => {
        const returnedFromService = Object.assign(
          {
            numLigne1: 1,
            resort2: 'BBBBBB',
            resvNameId3: 1,
            clientOId4: 'BBBBBB',
            typeChb5: 'BBBBBB',
            confirmationNo6: 'BBBBBB',
            clientMdmId7: 'BBBBBB',
            nameId8: 1,
            parentResvNameId9: 1,
            contactId10: 1,
            agenceId11: 1,
            agenceNom12: 'BBBBBB',
            societeId13: 1,
            groupeId14: 1,
            numBloc15: 1,
            typeResv16: 'BBBBBB',
            statutResv17: 'BBBBBB',
            dateDebutResv18: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv19: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv20: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv21: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv22: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn23: 'BBBBBB',
            createurResv24: 1,
            nomCreateurResv25: 'BBBBBB',
            codeGarantie26: 'BBBBBB',
            flgDed27: 'BBBBBB',
            codePays28: 'BBBBBB',
            libPays29: 'BBBBBB',
            codeNationalite30: 'BBBBBB',
            libNationalite31: 'BBBBBB',
            codeSource32: 'BBBBBB',
            libSource33: 'BBBBBB',
            codeGrandSource34: 'BBBBBB',
            codeOrigine35: 'BBBBBB',
            libOrigine36: 'BBBBBB',
            codeMarche37: 'BBBBBB',
            libMarche38: 'BBBBBB',
            codeGrandMarche39: 'BBBBBB',
            libGrandMarche40: 'BBBBBB',
            codePrix41: 'BBBBBB',
            categPrix42: 'BBBBBB',
            libPrix43: 'BBBBBB',
            numChb44: 'BBBBBB',
            descriptionTypeChb45: 'BBBBBB',
            codeTypeChb46: 'BBBBBB',
            classChb47: 'BBBBBB',
            caractChb48: 'BBBBBB',
            typeChbDeReservation49: 'BBBBBB',
            descriptionTypeChbDeResv50: 'BBBBBB',
            codeTypeChbDeResv51: 'BBBBBB',
            statutDeReservation52: 'BBBBBB',
            circuitDistribution53: 'BBBBBB',
            circuitDistribUserRegroup54: 'BBBBBB',
            numCrs55: 'BBBBBB',
            typeRefCrs56: 'BBBBBB',
            crsInsertDate57: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv58: dayjs(currentDate).format(DATE_FORMAT),
            datePremier59: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier60: 'BBBBBB',
            dateDernier61: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier62: 'BBBBBB',
            dateDernierPseudo63: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo64: 'BBBBBB',
            diffDtCreaAnn65: 1,
            diffDtArrAnn66: 1,
            leadtime67: 1,
            los68: 1,
            occupantsGroupe69: 'BBBBBB',
            nbNuitee70: 1,
            nbNuiteeNnDed71: 1,
            nbResvAnn72: 1,
            nbAdu73: 1,
            nbEnf74: 1,
            nbPersDayU75: 1,
            nbPersArr76: 1,
            nbPersDep77: 1,
            nbPersAnn78: 1,
            nbPersNoshow79: 1,
            nbChbDayU80: 1,
            nbChbArr81: 1,
            nbChbDep82: 1,
            nbChbAnn83: 1,
            nbChbNoshow84: 1,
            revenuNetChambre85: 1,
            revenuTaxeChambre86: 1,
            revenuNetChambreGlobal87: 1,
            revenuTaxeChambreGlobal88: 1,
            revenuNetBq89: 1,
            revenuTaxeBq90: 1,
            revenuNetBqGlobal91: 1,
            revenuTaxeBqGlobal92: 1,
            revenuNetExtra93: 1,
            revenuTaxeExtra94: 1,
            revenuNetExtraGlobal95: 1,
            revenuTaxeExtraGlobal96: 1,
            revenuNetTotal97: 1,
            revenuTaxeTotal98: 1,
            revenuNetTotalGlobal99: 1,
            revenuTaxeTotalGlobal100: 1,
            prodRevenuChambre101: 1,
            prodRevenuBq102: 1,
            prodRevenuExtra103: 1,
            prodRevenuTotal104: 1,
            prodChambreNbNuitees105: 1,
            techCreateDate106: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate107: dayjs(currentDate).format(DATE_FORMAT),
            numLigne108: 1,
            resort109: 'BBBBBB',
            resvNameId110: 1,
            clientOId111: 'BBBBBB',
            typeChb112: 'BBBBBB',
            confirmationNo113: 'BBBBBB',
            clientMdmId114: 'BBBBBB',
            nameId115: 1,
            parentResvNameId116: 1,
            contactId117: 1,
            agenceId118: 1,
            agenceNom119: 'BBBBBB',
            societeId120: 1,
            groupeId121: 1,
            numBloc122: 1,
            typeResv123: 'BBBBBB',
            statutResv124: 'BBBBBB',
            dateDebutResv125: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv126: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv127: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv128: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv129: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn130: 'BBBBBB',
            createurResv131: 1,
            nomCreateurResv132: 'BBBBBB',
            codeGarantie133: 'BBBBBB',
            flgDed134: 'BBBBBB',
            codePays135: 'BBBBBB',
            libPays136: 'BBBBBB',
            codeNationalite137: 'BBBBBB',
            libNationalite138: 'BBBBBB',
            codeSource139: 'BBBBBB',
            libSource140: 'BBBBBB',
            codeGrandSource141: 'BBBBBB',
            codeOrigine142: 'BBBBBB',
            libOrigine143: 'BBBBBB',
            codeMarche144: 'BBBBBB',
            libMarche145: 'BBBBBB',
            codeGrandMarche146: 'BBBBBB',
            libGrandMarche147: 'BBBBBB',
            codePrix148: 'BBBBBB',
            categPrix149: 'BBBBBB',
            libPrix150: 'BBBBBB',
            numChb151: 'BBBBBB',
            descriptionTypeChb152: 'BBBBBB',
            codeTypeChb153: 'BBBBBB',
            classChb154: 'BBBBBB',
            caractChb155: 'BBBBBB',
            typeChbDeReservation156: 'BBBBBB',
            descriptionTypeChbDeResv157: 'BBBBBB',
            codeTypeChbDeResv158: 'BBBBBB',
            statutDeReservation159: 'BBBBBB',
            circuitDistribution160: 'BBBBBB',
            circuitDistribUserRegroup161: 'BBBBBB',
            numCrs162: 'BBBBBB',
            typeRefCrs163: 'BBBBBB',
            crsInsertDate164: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv165: dayjs(currentDate).format(DATE_FORMAT),
            datePremier166: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier167: 'BBBBBB',
            dateDernier168: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier169: 'BBBBBB',
            dateDernierPseudo170: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo171: 'BBBBBB',
            diffDtCreaAnn172: 1,
            diffDtArrAnn173: 1,
            leadtime174: 1,
            los175: 1,
            occupantsGroupe176: 'BBBBBB',
            nbNuitee177: 1,
            nbNuiteeNnDed178: 1,
            nbResvAnn179: 1,
            nbAdu180: 1,
            nbEnf181: 1,
            nbPersDayU182: 1,
            nbPersArr183: 1,
            nbPersDep184: 1,
            nbPersAnn185: 1,
            nbPersNoshow186: 1,
            nbChbDayU187: 1,
            nbChbArr188: 1,
            nbChbDep189: 1,
            nbChbAnn190: 1,
            nbChbNoshow191: 1,
            revenuNetChambre192: 1,
            revenuTaxeChambre193: 1,
            revenuNetChambreGlobal194: 1,
            revenuTaxeChambreGlobal195: 1,
            revenuNetBq196: 1,
            revenuTaxeBq197: 1,
            revenuNetBqGlobal198: 1,
            revenuTaxeBqGlobal199: 1,
            revenuNetExtra200: 1,
            revenuTaxeExtra201: 1,
            revenuNetExtraGlobal202: 1,
            revenuTaxeExtraGlobal203: 1,
            revenuNetTotal204: 1,
            revenuTaxeTotal205: 1,
            revenuNetTotalGlobal206: 1,
            revenuTaxeTotalGlobal207: 1,
            prodRevenuChambre208: 1,
            prodRevenuBq209: 1,
            prodRevenuExtra210: 1,
            prodRevenuTotal211: 1,
            prodChambreNbNuitees212: 1,
            techCreateDate213: dayjs(currentDate).format(DATE_FORMAT),
            techUpdateDate214: dayjs(currentDate).format(DATE_FORMAT),
            numLigne215: 1,
            resort216: 'BBBBBB',
            resvNameId217: 1,
            clientOId218: 'BBBBBB',
            typeChb219: 'BBBBBB',
            confirmationNo220: 'BBBBBB',
            clientMdmId221: 'BBBBBB',
            nameId222: 1,
            parentResvNameId223: 1,
            contactId224: 1,
            agenceId225: 1,
            agenceNom226: 'BBBBBB',
            societeId227: 1,
            groupeId228: 1,
            numBloc229: 1,
            typeResv230: 'BBBBBB',
            statutResv231: 'BBBBBB',
            dateDebutResv232: dayjs(currentDate).format(DATE_FORMAT),
            dateFinResv233: dayjs(currentDate).format(DATE_FORMAT),
            truncDateDebutResv234: dayjs(currentDate).format(DATE_FORMAT),
            truncDateFinResv235: dayjs(currentDate).format(DATE_FORMAT),
            dateAnnResv236: dayjs(currentDate).format(DATE_FORMAT),
            pseudoRoomYn237: 'BBBBBB',
            createurResv238: 1,
            nomCreateurResv239: 'BBBBBB',
            codeGarantie240: 'BBBBBB',
            flgDed241: 'BBBBBB',
            codePays242: 'BBBBBB',
            libPays243: 'BBBBBB',
            codeNationalite244: 'BBBBBB',
            libNationalite245: 'BBBBBB',
            codeSource246: 'BBBBBB',
            libSource247: 'BBBBBB',
            codeGrandSource248: 'BBBBBB',
            codeOrigine249: 'BBBBBB',
            libOrigine250: 'BBBBBB',
            codeMarche251: 'BBBBBB',
            libMarche252: 'BBBBBB',
            codeGrandMarche253: 'BBBBBB',
            libGrandMarche254: 'BBBBBB',
            codePrix255: 'BBBBBB',
            categPrix256: 'BBBBBB',
            libPrix257: 'BBBBBB',
            numChb258: 'BBBBBB',
            descriptionTypeChb259: 'BBBBBB',
            codeTypeChb260: 'BBBBBB',
            classChb261: 'BBBBBB',
            caractChb262: 'BBBBBB',
            typeChbDeReservation263: 'BBBBBB',
            descriptionTypeChbDeResv264: 'BBBBBB',
            codeTypeChbDeResv265: 'BBBBBB',
            statutDeReservation266: 'BBBBBB',
            circuitDistribution267: 'BBBBBB',
            circuitDistribUserRegroup268: 'BBBBBB',
            numCrs269: 'BBBBBB',
            typeRefCrs270: 'BBBBBB',
            crsInsertDate271: dayjs(currentDate).format(DATE_FORMAT),
            dateCreaResv272: dayjs(currentDate).format(DATE_FORMAT),
            datePremier273: dayjs(currentDate).format(DATE_FORMAT),
            statutPremier274: 'BBBBBB',
            dateDernier275: dayjs(currentDate).format(DATE_FORMAT),
            statutDernier276: 'BBBBBB',
            dateDernierPseudo277: dayjs(currentDate).format(DATE_FORMAT),
            statutDernierPseudo278: 'BBBBBB',
            diffDtCreaAnn279: 1,
            diffDtArrAnn280: 1,
            leadtime281: 1,
            los282: 1,
            occupantsGroupe283: 'BBBBBB',
            nbNuitee284: 1,
            nbNuiteeNnDed285: 1,
            nbResvAnn286: 1,
            nbAdu287: 1,
            nbEnf288: 1,
            nbPersDayU289: 1,
            nbPersArr290: 1,
            nbPersDep291: 1,
            nbPersAnn292: 1,
            nbPersNoshow293: 1,
            nbChbDayU294: 1,
            nbChbArr295: 1,
            nbChbDep296: 1,
            nbChbAnn297: 1,
            nbChbNoshow298: 1,
            revenuNetChambre299: 1,
            revenuTaxeChambre300: 1,
            revenuNetChambreGlobal301: 1,
            revenuTaxeChambreGlobal302: 1,
            revenuNetBq303: 1,
            revenuTaxeBq304: 1,
            revenuNetBqGlobal305: 1,
            revenuTaxeBqGlobal306: 1,
            revenuNetExtra307: 1,
            revenuTaxeExtra308: 1,
            revenuNetExtraGlobal309: 1,
            revenuTaxeExtraGlobal310: 1,
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            dateDebutResv18: currentDate,
            dateFinResv19: currentDate,
            truncDateDebutResv20: currentDate,
            truncDateFinResv21: currentDate,
            dateAnnResv22: currentDate,
            crsInsertDate57: currentDate,
            dateCreaResv58: currentDate,
            datePremier59: currentDate,
            dateDernier61: currentDate,
            dateDernierPseudo63: currentDate,
            techCreateDate106: currentDate,
            techUpdateDate107: currentDate,
            dateDebutResv125: currentDate,
            dateFinResv126: currentDate,
            truncDateDebutResv127: currentDate,
            truncDateFinResv128: currentDate,
            dateAnnResv129: currentDate,
            crsInsertDate164: currentDate,
            dateCreaResv165: currentDate,
            datePremier166: currentDate,
            dateDernier168: currentDate,
            dateDernierPseudo170: currentDate,
            techCreateDate213: currentDate,
            techUpdateDate214: currentDate,
            dateDebutResv232: currentDate,
            dateFinResv233: currentDate,
            truncDateDebutResv234: currentDate,
            truncDateFinResv235: currentDate,
            dateAnnResv236: currentDate,
            crsInsertDate271: currentDate,
            dateCreaResv272: currentDate,
            datePremier273: currentDate,
            dateDernier275: currentDate,
            dateDernierPseudo277: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve().then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of Table8', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a Table8', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete(123).then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a Table8', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
